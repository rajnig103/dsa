class Graph {
    constructor () {
        this.addjacenaryList = new Map();
    }

    addVertex(vertex) {
        if (!this.addjacenaryList.has(vertex)) {
            this.addjacenaryList.set(vertex, [])
        }
    }
    addEdge(src, dest) {
        this.addjacenaryList.get(src).push(dest);
        this.addjacenaryList.get(dest).push(src);
    }

    bfs(startvertex) {
        const visited = {};
        const queue = [startvertex];
        const result = [];

        visited[startvertex] = true;

        while (queue.length) {
            const currentvertex = queue.shift();
            result.push(currentvertex);
            let neighbors = this.addjacenaryList.get(currentvertex);

            for (let neighbour of neighbors) {
                if (!visited[neighbour]) {
                    visited[neighbour] = true;
                    queue.push(neighbour);
                }
            }
        }
        return result;

    }
    print() {
        for (let [vertex, edges] of this.addjacenaryList) {
            console.log(vertex + " -> " + edges)
        }
    }
}
const graph = new Graph();

graph.addVertex("A");
graph.addVertex("B");
graph.addVertex("C");
graph.addVertex("D");
graph.addVertex("E");
graph.addVertex("F");

graph.addEdge("A", "B");
graph.addEdge("A", "C");
graph.addEdge("B", "D");
graph.addEdge("C", "E");
graph.addEdge("D", "E");
graph.addEdge("D", "F");
graph.addEdge("E", "F");
graph.print();

console.log(graph.bfs("A")); // Output: [ 'A', 'B', 'C', 'D', 'E', 'F' ]
