#Recursively 
class Graph {
    constructor() {
        this.adjList = new Map();
    }

    addVertex(vertex) {
        if (!this.adjList.has(vertex)) {
            this.adjList.set(vertex, []);
        }
    }

    addEdge(v, w) {
        this.adjList.get(v).push(w); // For undirected graph, you can also add w to v's list
    }

    dfs(startVertex) {
        const visited = new Set();

        this._dfsUtil(startVertex, visited);
    }

    _dfsUtil(vertex, visited) {
        visited.add(vertex);
        console.log(vertex);

        const neighbors = this.adjList.get(vertex);

        for (const neighbor of neighbors) {
            if (!visited.has(neighbor)) {
                this._dfsUtil(neighbor, visited);
            }
        }
    }
}

// Example usage:
const graph = new Graph();

graph.addVertex('A');
graph.addVertex('B');
graph.addVertex('C');
graph.addVertex('D');
graph.addVertex('E');

graph.addEdge('A', 'B');
graph.addEdge('A', 'C');
graph.addEdge('B', 'D');
graph.addEdge('C', 'E');

console.log("Depth First Search (DFS):");
graph.dfs('A');

#iteration
class Graph {
    constructor () {
        this.adjacencyList = new Map();
    }

    addVertex(vertex) {
        this.adjacencyList.set(vertex, []);
    }

    addEdge(src, dest) {
        this.adjacencyList.get(src).push(dest);
    }

    dfslist() {
        const visited = new Set();

        const dfs = (vertex) => {
            visited.add(vertex);
            console.log("Visited:", vertex);

            const neighbors = this.adjacencyList.get(vertex);
            for (const neighbor of neighbors) {
                if (!visited.has(neighbor)) {
                    dfs(neighbor);
                }
            }
        };

        for (let [vertex] of this.adjacencyList) {
            if (!visited.has(vertex)) {
                dfs(vertex);
            }
        }
    }
}

// Example usage:
const graph = new Graph();

graph.addVertex('A');
graph.addVertex('B');
graph.addVertex('C');
graph.addVertex('D');
graph.addEdge('A', 'B');
graph.addEdge('A', 'C');
graph.addEdge('B', 'D');
graph.addEdge('C', 'B');

console.log("Depth First Search (DFS) using iteration:");
graph.dfslist();
